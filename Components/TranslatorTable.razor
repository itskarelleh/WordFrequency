@using WordFrequency.Models;
@using WordFrequency.Components;

<div>
    @if(words.Count == 0)
    {
        <h3 class="text-center text-2xl font-mono text-white">Let's Translate some Words</h3>        
    } else
    {
        <h3 class="text-center text-2xl font-mono text-white">Results</h3>
        <table class="table-fixed w-1/2 m-auto bg-zinc-100 drop-shadow-lg p-5">
            <thead>
                <tr>
                    <th>word</th>
                    <th>frequency</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var word in words)
                {
                    <tr @key=word>
                        <td class="indent-3">@word.Value</td>
                        <td class="text-center">@word.Frequency</td>
                    </tr>
                }
            </tbody>
        </table>
        <p class="font-bold text-white text-center mt-3">Total: @totalCount</p>
    }
</div>

@code {

    [Parameter]
    public string TextInput { get; set; }
    public List<Word> words;
    int totalCount;

    public void getTotalCount()
    {

        for (int i = 0; i <= words.Count; i++)
        {
            int curr = words[i].Frequency;

            totalCount += curr;
        }

        StateHasChanged();

    }

    public void convertInputToWordList()
    {
        char[] delimiterChars = { ' ', ',', '.', ':', '\t', '!', '?' };
        //convert input string to a string array, splitting by spaces and ignoring punctuations if there is a space after them.

        string[] arr = TextInput.Split(delimiterChars);
        Array.Sort(arr, StringComparer.Ordinal);

        int next = 0;

        for (int i = 0; i < arr.Length - 1; i++)
        {
            i = next;
            int count = 1;

            //
            for (int j = i + 1; j < arr.Length; j++)
            {
                if (arr[j] == arr[i])
                {
                    count++;
                }

                if (arr[j] != arr[i])
                {
                    next = j;
                    break;
                }
            }

            Word curr = new Word(arr[i], count);

            words.Add(curr);   
        }

        words = words.OrderByDescending(w => w.Frequency).ToList();
        StateHasChanged();
    }

    public void resetTable()
    {
        words = new List<Word>();
        totalCount = 0;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        words = new List<Word>();
    }
}
