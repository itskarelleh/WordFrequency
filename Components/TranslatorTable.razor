@using WordFrequency.Models;
@using WordFrequency.Components;

    <div class="m-auto">  
        <h3 class="m-auto text-center text-3xl font-semibold font-sans text-white">@(words.Count == 0 ?
            "Time to Translate some Words! 📝" : "Results")
        </h3>
        <h4 class="m-auto text-center text-2xl font-sans text-white">@(words.Count == 0 ? "Write or copy + paste text into the textbox" : null)</h4>
    </div>

    @if (words.Count != 0)
    {
        <div class="h-1/3 w-1/2 overflow-auto">
            <table class="table-auto w-full bg-white overflow-auto">
                <thead>
                    <tr>
                        <th>word</th>
                        <th>frequency</th>
                    </tr>
                </thead>
                <tbody class="overflow-y-auto">
                    @foreach (var word in words)
                    {
                        <tr @key=word>
                            <td class="indent-3">@word.Value</td>
                            <td class="text-center">@word.Frequency</td>
                        </tr>
                    }
                </tbody>
            </table>
            <p class="font-bold text-white text-center mt-3">Total: @totalCount</p>
        </div>
    }

@code {

    [Parameter]
    public string TextInput { get; set; }
    public List<Word> words;
    public int totalCount;

    public void getTotalCount()
    {
        for (int i = 0; i <= words.Count; i++)
        {
            int curr = words[i].Frequency;

            totalCount += curr;
        }

        StateHasChanged();

    }

    public void convertInputToWordList()
    {
        char[] delimiterChars = { ' ', ',', '.', ':', '\t', '!', '?' };
        //convert input string to a string array, splitting by spaces and ignoring punctuations if there is a space after them.

        string[] arr = TextInput.Split(delimiterChars);

        Array.Sort(arr, StringComparer.Ordinal);

        int next = 0;

        for (int i = 0; i < arr.Length - 1; i++)
        {
            i = next;
            int count = 1;

            //
            for (int j = i + 1; j < arr.Length; j++)
            {
                if (arr[j] == arr[i])
                {
                    count++;
                }

                if (arr[j] != arr[i])
                {
                    next = j;
                    break;
                }
            }

            Word curr = new Word(arr[i], count);

            words.Add(curr);
        }

        words = words.OrderByDescending(w => w.Frequency).ToList();

        StateHasChanged();
    }

    public void resetTable()
    {
        words = new List<Word>();
        //totalCount = 0;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        words = new List<Word>();
    }
}
