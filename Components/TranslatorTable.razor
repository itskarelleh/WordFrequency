@using WordFrequency.Models;
@using WordFrequency.Components;
@using System;
@using System.Text.RegularExpressions;

<div class="my-auto w-full h-3/4 flex flex-col items-center">
    <div class="m-auto">  
        <h3 class="m-auto text-center text-3xl font-semibold font-sans text-white">@(words.Count == 0 ?
            "Time to Translate some Words! 📝" : "Results")
        </h3>
        <h4 class="m-auto text-center text-2xl font-sans text-white">@(words.Count == 0 ? "Write or copy + paste text into the textbox" : null)</h4>
    </div>

    @if (words.Count != 0)
    {
        <div class="mx-auto h-2/3 w-1/2 sm:w-2/3 overflow-auto">
            <table class="h-1/2 sm:h-full sm:h-auto table-auto w-full bg-white overflow-auto">
                <thead>
                    <tr>
                        <th>word</th>
                        <th>frequency</th>
                    </tr>
                </thead>
                <tbody class="overflow-y-auto h-full">
                    @foreach (var word in words)
                    {
                        <tr @key=word>
                            <td class="indent-3">@word.Value</td>
                            <td class="text-center">@word.Frequency</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>
@code {

    [Parameter]
    public string TextInput { get; set; }
    public List<Word> words { get; set; } = new List<Word>();

    public void convertInputToWordList()
    {
        string str = Regex.Replace(TextInput, @"[^\w\s]", string.Empty);

        if (str == "") {
            throw new Exception("The body of text you entered is empty. Please enter some words.");
        }

        string[] arr = str.Split(" ");

        Array.Sort(arr, StringComparer.Ordinal);

        int next = 0;

        for (int i = 0; i < arr.Length - 1; i++)
        {
            i = next;
            int count = 1;

            for (int j = i + 1; j < arr.Length; j++)
            {
                if (arr[j] == arr[i])
                {
                    count++;
                }

                if (arr[j] != arr[i])
                {
                    next = j;
                    break;
                }
            }

            Word curr = new Word(arr[i], count);

            words.Add(curr);
        }

        words = words.OrderByDescending(w => w.Frequency).ToList();

        //StateHasChanged();
    }
     
    public void resetTable()
    {
        words = new List<Word>();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        words = new List<Word>();
    }
}
